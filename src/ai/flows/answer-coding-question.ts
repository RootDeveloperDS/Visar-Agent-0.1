'use server';

/**
 * @fileOverview This file defines a Genkit flow for answering coding-related questions using the DeepSeek API.
 *
 * - answerCodingQuestion - A function that accepts a coding-related question and returns an answer generated by the DeepSeek API.
 * - AnswerCodingQuestionInput - The input type for the answerCodingQuestion function.
 * - AnswerCodingQuestionOutput - The return type for the answerCodingQuestion function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import {googleAI} from '@genkit-ai/googleai';

const AnswerCodingQuestionInputSchema = z.object({
  question: z.string().describe('The coding-related question to be answered.'),
  existingCode: z.string().optional().describe('Existing code to be incorporated into the answer.'),
  apiKey: z.string().optional().describe('Optional user-provided API key.'),
});
export type AnswerCodingQuestionInput = z.infer<typeof AnswerCodingQuestionInputSchema>;

const AnswerCodingQuestionOutputSchema = z.object({
  answer: z.string().describe('The answer to the coding-related question.'),
});
export type AnswerCodingQuestionOutput = z.infer<typeof AnswerCodingQuestionOutputSchema>;

export async function answerCodingQuestion(input: AnswerCodingQuestionInput): Promise<AnswerCodingQuestionOutput> {
  return answerCodingQuestionFlow(input);
}

const answerCodingQuestionPrompt = ai.definePrompt({
  name: 'answerCodingQuestionPrompt',
  input: {schema: z.object({
    question: AnswerCodingQuestionInputSchema.shape.question,
    existingCode: AnswerCodingQuestionInputSchema.shape.existingCode,
  })},
  output: {schema: AnswerCodingQuestionOutputSchema},
  prompt: `You are a coding assistant. Answer the following question:

Question: {{{question}}}

{{#if existingCode}}
Existing Code:
{{{{existingCode}}}}
{{/if}}`,
});

const answerCodingQuestionFlow = ai.defineFlow(
  {
    name: 'answerCodingQuestionFlow',
    inputSchema: AnswerCodingQuestionInputSchema,
    outputSchema: AnswerCodingQuestionOutputSchema,
  },
  async ({apiKey, ...promptInput}) => {
    let model = ai.model('googleai/gemini-2.0-flash');
    
    // If user provides a custom API key, use it instead of the default
    if (apiKey) {
      const customGoogleAI = googleAI({
        apiKey: apiKey,
      });
      model = customGoogleAI.model('gemini-2.0-flash');
    }
    
    const {output} = await ai.run(
      'answer-coding-question-prompt-execution',
      () => answerCodingQuestionPrompt(promptInput, {model})
    );
    return output!;
  }
);
